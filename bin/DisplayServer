#!/usr/bin/perl
#
########################################################################################################################
########################################################################################################################
##
##      Copyright (C) 2020 Peter Walsh, Milford, NH 03055
##      All Rights Reserved under the MIT license as outlined below.
##
##  FILE
##
##      DisplayServer
##
##  DESCRIPTION
##
##      RasPi display server
##
##      Monitor a directory, and display the files that appear there
##
##  USAGE
##
##      DisplayServer [-v]
##
##      where:      -v      Verbose: print out things as they happen
##
########################################################################################################################
########################################################################################################################
##
##      $DisplayFiles   Contains information about the displayed files, listed by PID
##
##      $DisplayFiles->{$PID}
##          {PID}     -> PID of process displaying file (== hash key)
##          {Command} -> Command used for displaying file
##          {DTM}     -> Date-time-modified of file
##
##      $DisplayConfig  Contains information about how to display files, listed by file extension
##
##      $DisplayConfig->{$ext}                  # File extension; ie - ".jpg"
##          {Command} -> "some-command %U"      # Command used to display that file
##
########################################################################################################################
########################################################################################################################
##
##  MIT LICENSE
##
##  Permission is hereby granted, free of charge, to any person obtaining a copy of
##    this software and associated documentation files (the "Software"), to deal in
##    the Software without restriction, including without limitation the rights to
##    use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
##    of the Software, and to permit persons to whom the Software is furnished to do
##    so, subject to the following conditions:
##
##  The above copyright notice and this permission notice shall be included in
##    all copies or substantial portions of the Software.
##
##  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
##    INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
##    PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
##    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
##    OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
##    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
##
########################################################################################################################
########################################################################################################################

use strict;
use warnings;
use Carp;

use JSON;
use Data::Dumper;
use File::Basename;

use lib "$ENV{HOME}/DisplayServer/lib";

use Site::Process;
use Site::WinInfo;

########################################################################################################################
########################################################################################################################
##
## Data declarations
##
########################################################################################################################
########################################################################################################################

my $DisplayDir = "/srv/Display";
my $OpenCmd    = "xdg-open";

my $DisplayList = {};
my $Processes    = Site::Process->new();
my @DisplayOrder;

$| = 1;         # Flush output immediately

########################################################################################################################
########################################################################################################################
##
## Display server
##
########################################################################################################################
########################################################################################################################

#
# Process command line args.
#
#     -v (verbose) means "print out extra stuff"
#
my $Verbose = 0;

$Verbose = 1
    if defined $ARGV[0] and $ARGV[0] eq "-v";

########################################################################################################################
########################################################################################################################
##
## Find all files in the startup directory, and start them.
##
########################################################################################################################
########################################################################################################################

chdir $DisplayDir;

my @DisplayFiles = <"*">;

$ENV{'DISPLAY'}=":0.0";     # Xwindows apps show on local display

AddFile($_)
    foreach @DisplayFiles;

my ($W, $H) = GetDisplaySize();

#
# Oldest file is displayed first, so that newest one is on top
#
@DisplayOrder = reverse sort { $DisplayList->{$a}->{MTime} <=> $DisplayList->{$b}->{MTime} } keys %{$DisplayList};

DisplayFile($_)
    foreach @DisplayOrder;

sleep(5);
my $WinInfo = GetWinInfo();

# F11Win($DisplayList->{$_}{FileInfo})
#     foreach @DisplayOrder;
    
exit(0);

while(1) {};

exit(0);


########################################################################################################################
########################################################################################################################
#
# DisplayFile - Display one file from the display list
#
# Inputs:   Filen to display (Key of entry in DisplayList)
#
# Outputs:  None.
#
sub DisplayFile {
    my $File = shift;

    $DisplayList->{$File}->{PID} = $Processes->BackgroundCommand("$OpenCmd $DisplayList->{$_}{FileInfo}{Path}");
#    $DisplayList->{$File}->{WID} = WaitForWindow($DisplayList->{$File}->{PID});
#    MaxWin($DisplayList->{$File}->{WID});

    return;
    }


########################################################################################################################
########################################################################################################################
#
# AddFile - Add one file to our display list
#
# Inputs:   Filename to display
#
# Outputs:  None.
#
sub AddFile {
    my $Filename = shift;

    return
        unless FileDisplayable($Filename);

    my $FileInfo = ParseFilename($Filename);

    print "Displaying $FileInfo->{Path}\n"
        if $Verbose;

    my $File = $FileInfo->{BaseName};

    $DisplayList->{$File}->{FileInfo} = $FileInfo;
    $DisplayList->{$File}->{   MTime} = $FileInfo->{MTime};

    return;
    }


########################################################################################################################
########################################################################################################################
#
# FileDisplayable - Return TRUE if file is of a kind that can be displayed
#
# Inputs:   Filename to check
#
# Outputs:  TRUE  if file can be displayed by this program
#           FALSE if file is not displayable for some reason (link, setuid, socket, &c)
#
sub FileDisplayable {
    my $Filename = shift;

    #
    # Ignore non-displayable files
    #
    return 0
        if -d $Filename;            # Directories are not displayed.

    return 0
        if -x $Filename;            # Ignore executables

    return 0
        if -z $Filename;            # File is zero size

    return 0
        unless -r $Filename;        # Non-readable file

    return 0
        unless -f $Filename;        # Plain file: not a link, pipe, socket, or device

    return 0
        if -u $Filename;            # File has setuid

    return 0
        if -g $Filename;            # File has setgid

    return 0
        if -k $Filename;            # File has set sticky

    return 1;
    }


########################################################################################################################
########################################################################################################################
#
# ParseFilename - Parse filename and return info struct
#
# Inputs:   Filename to parse
#
# Outputs:  Info struct about file
#
sub ParseFilename {
    my $Filename = shift;

    #
    # Escape any spaces or quotes in the filename
    #
    $Filename =~ s/ /\\ /g;
    $Filename =~ s/\'/\\\'/g;

    my $FullPath = $Filename;
    my $DirName  = dirname  $Filename;
    my $BaseName = basename $Filename;
    my ($Ext)    = $BaseName =~ s/(\.[^.]+)$//;
    my $Type     = `file -b $FullPath`;
    my $Scale    = "B";

    chomp $Type;

    $Ext = substr($Ext,1)
        if substr($Ext,0,1) eq ".";

    $Ext = lc $Ext;

    if( $Ext eq ".SWid" ) {
        my $Scale    = "W";
        my ($Ext)    = $BaseName =~ s/(\.[^.]+)$//;
        }

    if( $Ext eq ".SHgt" ) {
        my $Scale    = "H";
        my ($Ext)    = $BaseName =~ s/(\.[^.]+)$//;
        }

    if( $Ext eq ".SNone" ) {
        my $Scale    = "N";
        my ($Ext)    = $BaseName =~ s/(\.[^.]+)$//;
        }

    $Ext = substr($Ext,1)
        if substr($Ext,0,1) eq ".";

    $Ext = lc $Ext;

    my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,
        $atime,$mtime,$ctime,$blksize,$blocks) = stat($Filename);

    if( $Verbose ) {
        print "$Filename:\n";
        print "    Dir:   $DirName\n";
        print "    Base:  $BaseName\n";
        print "    Type:  $Type\n";
        print "    Scale: $Scale\n";
        print "    Ext:   $Ext\n";
        print "    Time:  $mtime\n";
        print "\n";
        }

    return { Path     => $FullPath,
             Dir      => $DirName,
             BaseName => $BaseName,
             Ext      => $Ext,
             Type     => $Type,
             Scale    => $Scale,
             MTime    => $mtime,
             };
    }


########################################################################################################################
########################################################################################################################
#
# GetConfig - Set up a local config struct with all the information from the config file
#
# Inputs:      None.
#
# Outputs:     None. Global $DisplayServerConfig is filled
#
sub GetConfig {

    ####################################################################################################################
    #
    # GPIO information, from config file
    #
    return { Valid => 0 }
        unless -r $GPIOConfigFile;

    my $ConfigFile = Site::ParseData->new(Filename => $GPIOConfigFile, Matches  => $GPIOMatches);
    $GPIOConfig = $ConfigFile->ParseFile();

    $GPIOConfig->{$RenameKey} = MatchArgs($GPIOConfig->{$RenameKey}, [ "Yes", "No" ],"Global",$RenameKey);
    $GPIOConfig->{Valid} = $ConfigFile->{Parsed};

    foreach my $GPIOID (keys %{$GPIOConfig}) {

        next
            if $GPIOID eq "Valid" or $GPIOID eq $RenameKey;

        ################################################################################################################
        #
        # Do some conversions and simple error checking on the GPIO input file
        #
        # GPIO    3
        #     Mode=Output
        #     Logic=Normal
        #     Pull=High
        #     Boot=Off
        #     HName="Relay U3"
        #     UName="Relay U3"
        #     UDesc=""
        #
        exit Message("**** GPIOServer: GPIO ID ($GPIOID) is not valid number")
            unless $GPIOID =~ /^\d+$/;

        exit Message("**** GPIOServer: GPIO ID ($GPIOID) is out of range")
            unless $GPIOID >= 0 and $GPIOID <= 31;

        my $GPIO = $GPIOConfig->{$GPIOID};

        $GPIO->{ Mode} = MatchArgs($GPIO->{ Mode},[  "Input", "Output" ],$GPIOID, "Mode");
        $GPIO->{Logic} = MatchArgs($GPIO->{Logic},[ "Normal", "Invert" ],$GPIOID,"Logic");
        $GPIO->{ Boot} = MatchArgs($GPIO->{ Boot},[    "Off",     "On" ],$GPIOID, "Boot");

        #
        # Pull takes "High", "Low", or "None". Devault (1st arg) is "None".
        #
        $GPIO->{Pull} = MatchArgs($GPIO->{Pull},[  "None", "Low", "High" ],$GPIOID, "Pull")
            if $GPIO->{Mode} eq "Input";

        $GPIO->{HName} = "GPIO$GPIOID"
            unless defined $GPIO->{HName} and length $GPIO->{HName};

        $GPIO->{UName} = "GPIO$GPIOID"
            unless defined $GPIO->{UName} and length $GPIO->{UName};

        $GPIO->{UDesc} = "---"
            unless defined $GPIO->{UDesc} and length $GPIO->{UDesc};

        ################################################################################################################
        #
        # Connect to the GPIO in question and get the current value
        #
        my $Device = RPi::Pin->new($GPIOID);
        $GPIO->{Device} = $Device;

        if( $GPIO->{Mode} eq "Input" ) { 
            $Device->mode(INPUT); 

            if(    $GPIO->{Pull} eq "High" ) { $Device->pull(PUD_UP)  ; }
            elsif( $GPIO->{Pull} eq "Low"  ) { $Device->pull(PUD_DOWN); }
            else                             { $Device->pull(PUD_OFF) ; }

            $Device->set_interrupt(EDGE_BOTH,'main::PinChange');
            }
        else                           { 
            #
            # Avoid pathological spike that can happen if we set the mode
            #   before setting the output value.
            #
            SetGPIO($GPIOID,$GPIO->{Boot});
            $Device->mode(OUTPUT); 
            SetGPIO($GPIOID,$GPIO->{Boot});
            }
        }
    }
